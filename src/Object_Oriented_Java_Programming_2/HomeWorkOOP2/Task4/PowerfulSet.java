package HomeWorkOOP2.Task4;
/*
3.	Реализовать класс PowerfulSet, в котором должны быть следующие методы:
a.	public <T> Set<T> intersection(Set<T> set1, Set<T> set2) — возвращает пересечение двух наборов. Пример: set1 = {1, 2, 3}, set2 = {0, 1, 2, 4}. Вернуть {1, 2}

b.	public <T> Set<T> union(Set<T> set1, Set<T> set2) — возвращает объединение двух наборов. Пример: set1 = {1, 2, 3}, set2 = {0, 1, 2, 4}. Вернуть {0, 1, 2, 3, 4}

c.	public <T> Set<T> relativeComplement(Set<T> set1, Set<T> set2) — возвращает элементы первого набора без тех, которые находятся также и во втором наборе. Пример: set1 = {1, 2, 3}, set2 = {0, 1, 2, 4}. Вернуть {3}
 */
public class PowerfulSet {


}
//изучить документацию, колекции и какие методы
//intersection  пересечение, на вход принять сет1 и сет 2 и пересечь их. Изменить первый сет. В реальной жизни изменять коллекции не очень хорошо (метод получает выборку), лучше работать с копией коллекцией (обработка)
//новой коллекцие присвоить первой и вызывать.  ньюхеш сет (женерик метод) промежуточный стак создать копию . метод return set1.retailAll(set2) - удалит и оставить только те, которые содержаться во втором наборе

//2.объединение   union, на вход поступают сет1 и сет 2 и чтобы объединить создать копию первого и объединить. return set1.addAll(set2) - вызвали и добавили вторую коллекцию

//3. relative тоже самое и вернули set1.removeAll(set2) удалит все элементы содержащие и оставить уникальные
